from aiogram import Bot, Dispatcher, executor, types
import json
import string
import os
from variables import *
from aiogram.dispatcher.dispatcher import Text
from botfumc import record_mess
from inlinekeyboard import ikb_cmd_start, ikb_create_account
from replykeyboard import loc_building, main_menu, map_building, menu_map
from aiogram.types import ReplyKeyboardRemove
# ##########################################################################################################


# ##########################################################################################################

bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher(bot)


# ######################################### –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã ######################################
async def on_startup(_):
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

# #******************************************* del swear words *********************************************


# —É–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
@dp.message_handler(lambda message: {i.lower().translate(str.maketrans('', '', string.punctuation))
                                     for i in message.text.split(" ")}
                    .intersection(set(json.load(open("MAT/cenz.json")))) != set())
async def send_no_mat(message: types.Message):
    await message.answer(text=f"–¢–æ–≤–∞—Ä–∏—â, {message.from_user.full_name}, –∞ –º–∞—Ç—ã —Ç–æ –∑–∞–ø—Ä–µ—â–µ–Ω—ã!!!")
    await message.delete()
# # ********************************************************************************************************


# ************************************ COMMAND BORT *****************************************************


# –ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç –∏ help
@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message):
    if message.text == "/start":
        await bot.send_photo(chat_id=message.from_user.id,
                             photo=open("C:/Users/Admin/Desktop/SOS_ION_BOT/INFO/photo_bota.jpg", "rb"),                # photo is bot   *********************
                             caption=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –í–∞—Å, {message.from_user.first_name}!!!\n–Ø –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ 0.0.11.")
        await message.answer(text=f"–Ø –æ–±–ª–∞–¥–∞—é –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –í–∞–º –∑–Ω–∞–Ω–∏—è–º–∏, —á—Ç–æ–±—ã "
                                  f"<a href='https://google.com'>–í–∞—à —Å–∞–π—Ç</a> –Ω–µ —Ä–∞–∑–¥–∞–≤–∏–ª–∞ –í–∞—Å —Å–≤–æ–µ–π –∑–∞–ø—É—Ç–∞–Ω–Ω–æ–π –∏ "
                                  f"–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π –Ω–∞ –ø–µ—Ä–≤—ã—Ö –ø–æ—Ä–∞—Ö –±—é—Ä–æ–∫—Ä–∞—Ç–∏–µ–π. üòé",
                             disable_web_page_preview=True,
                             parse_mode="HTML",
                             reply_markup=main_menu())
        # photo = "C:/Users/Admin/Desktop/SOS_ION_BOT/INFO/photo_bota.jpg",
        # await message.answer(text=)
    elif message.text == "/help":
        await message.answer(text=f"{HELP}", parse_mode="HTML")

    await message.delete()
# ##########################################################################################################

# ########################  –í–´–ó–û–í –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ  #######################################################


@dp.message_handler(commands=["menu"])
async def cmd_main_menu(message: types.Message):
    await message.answer(text=f"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ, —Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è. –ß–µ–º –∫–æ—Ä–æ—á–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–º —Ç–æ—á–Ω–µ–µ —è –æ—Ç–≤–µ—á—É.",
                         reply_markup=main_menu())
    await message.delete()


# #########################################################################################################


# –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞
@dp.message_handler(lambda message: any(item in message.text.lower() for item in privet))
async def send_privet(message: types.Message):
    await message.answer(f"–ò –í–∞–º,<< {message.from_user.full_name} >>, –¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!!!!\n"
                         f"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ, —Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è. –ß–µ–º –∫–æ—Ä–æ—á–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–º —Ç–æ—á–Ω–µ–µ —è –æ—Ç–≤–µ—á—É.")


# #########################################  –∫–Ω–æ–ø–∫–∏ —Å–ª—É–∂–µ–±–Ω—ã—Ö –∑–∞–ø–∏—Å–æ–∫ ############################################
# –≤—ã–∑–æ–≤ –∑–∞–ø–∏—Å–µ–π
@dp.message_handler(Text(equals=["–°–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–ø–∏—Å–∫–∏"]))
async def cmd_main_menu(message: types.Message):
    await message.answer(text=f"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ, —Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è. –ß–µ–º –∫–æ—Ä–æ—á–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–º —Ç–æ—á–Ω–µ–µ —è –æ—Ç–≤–µ—á—É.",
                         reply_markup=ikb_cmd_start)
    await message.delete()


# —Å–æ–∑–¥–∞–Ω–∏–µ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
@dp.callback_query_handler(Text(equals="create_account"))
async def create_account(callback: types.CallbackQuery):

    await bot.send_document(chat_id=callback.from_user.id,
                            document=open(f"{your_file.txt}", "rb"),                                          # here is your file
                            caption=f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É"
                                    f"–∏ –ø—Ä–∏—Å–ª–∞—Ç—å –µ–µ –Ω–∞ –ø–æ—á—Ç—É - ____@gmail.ru")
    await callback.message.answer(text=f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –§–ò–û + –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è,"
                                       f"–¥–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.\n"
                                       f"–ü–æ–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø–æ–º–µ—â–µ–Ω–∏–µ - –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.\n"
                                       f"<b>–û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å!</b>",
                                  parse_mode="HTML")
# ##########################################################################################################


# —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—á—Ç—ã –∞–∫–∞–¥–µ–º–∏–∏
@dp.callback_query_handler(Text(equals=["email_academy"]))
async def create_email_academy(callback: types.CallbackQuery):
    await callback.message.answer(text=f"–í—Ö–æ–¥ –≤ –ø–æ—á—Ç—É - (https://google.com/). "
                                       f"–î–ª—è –≤—Ö–æ–¥–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å. "
                                       f"–ù–∞–ø—Ä–∏–º–µ—Ä ( *****@gmail.com ) "
                                       f"–ï—Å–ª–∏ –Ω–µ—Ç —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏, —Ç–æ –Ω—É–∂–Ω–æ –µ–µ —Å–æ–∑–¥–∞—Ç—å.",
                                  reply_markup=ikb_create_account)
# ##########################################################################################################


# –ö–ê–° –∏ –†–ê–°–ü–ò–°–ê–ù–ò–ï
@dp.callback_query_handler(Text(equals=["kas_rasp"]))
async def create_kas_rasp(callback: types.CallbackQuery):
    await callback.message.answer(text=f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –ö–ê–° –∏ (–∏–ª–∏) –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –∏ "
                                       f"–ø—Ä–∏—Å–ª–∞—Ç—å –µ–µ –Ω–∞ –ø–æ—á—Ç—É - ******@gmail.com. –ü–æ –∑–∞—è–≤–∫–µ –¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ "
                                       f"–±–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –≤ –ö–ê–°. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ —É –¥—Ä—É–≥–∏–º –º–æ–¥—É–ª—è–º –∏ –ø–æ–¥—Å–∏—Å—Ç–µ–º–µ "
                                       f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ - https://help_me.gmail.com .")
    await bot.send_document(chat_id=callback.from_user.id,
                            document=open(f"{here is your file}", "rb"))                                               # here is your file 
# ##########################################################################################################


# Directum
@dp.callback_query_handler(Text(equals=["directum"]))
async def create_kas_rasp(callback: types.CallbackQuery):
    await callback.message.answer(text=f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ Directum, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É "
                                       f"–∏ –ø—Ä–∏—Å–ª–∞—Ç—å –µ–µ –Ω–∞ –ø–æ—á—Ç—É - ******@gmail.com")
    await bot.send_document(chat_id=callback.from_user.id,
                            document=open(f"{here is your file }", "rb"),                                                      # here is your file 
                            caption="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–Ω–∏–º.")

# ###################################### –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ##############################################################


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(Text(equals=["–ù–∞–∑–∞–¥"]))
async def back_mg(message: types.Message):
    await message.answer(text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
    await message.delete()

# ##################################################################################################################

# ##################################### –ö–û–†–ü–£–°–ê –ê–ö–ê–î–ï–ú–ò–ò ############################################################


# –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–∞–º–ø—É—Å
@dp.message_handler(Text(equals=["–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–∞–º–ø—É—Å"]))
async def central_campus(message: types.Message):
    await bot.send_document(message.from_user.id, document=open(f"{ here is your file }", "rb"),            # here is your file 
                            caption="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–∞–º–ø—É—Å")
    await message.delete()


# –≥–¥–µ –∫–∞–∫–æ–π –∫–æ—Ä–ø—É—Å
@dp.message_handler(Text(equals=["–ö–∞—Ä—Ç–∞"]))
async def maps_buildings(message: types.Message) -> None:
    await message.answer(text="–í—ã–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=menu_map())
    await message.delete()


@dp.message_handler(Text(equals=["–ö–∞—Ä—Ç–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ—Ä–ø—É—Å–æ–≤"]))
async def local_building(message: types.Message) -> None:
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –ö–æ—Ä–ø—É—Å", reply_markup=loc_building())
    await message.delete()


# LOCAL Corpus
@dp.message_handler(Text(startswith=["–ö–æ—Ä–ø—É—Å"]))
async def get_local_corpus(message: types.Message) -> None:
    if "–ö–æ—Ä–ø—É—Å" in message.text:
        if message.text == "–ö–æ—Ä–ø—É—Å 1":
            await bot.send_location(chat_id=message.chat.id,
                                    latitude=11.22222,                   # your coordinates
                                    longitude=11.22222)
        elif message.text == "–ö–æ—Ä–ø—É—Å 2":
            await bot.send_location(chat_id=message.chat.id,
                                    latitude=11.22222,
                                    longitude=11.22222)
        elif message.text == "–ö–æ—Ä–ø—É—Å 3":
            await bot.send_location(chat_id=message.chat.id,
                                    latitude=11.22222,
                                    longitude=11.22222)
        elif message.text == "–ö–æ—Ä–ø—É—Å 4":
            await bot.send_location(chat_id=message.chat.id,
                                    latitude=11.22222,
                                    longitude=11.22222)
        elif message.text == "–ö–æ—Ä–ø—É—Å 5":
            await bot.send_location(chat_id=message.chat.id,
                                    latitude=11.22222,
                                    longitude=11.22222)
        elif message.text == "–ö–æ—Ä–ø—É—Å 6":
            await bot.send_location(chat_id=message.chat.id,
                                    latitude=11.22222,
                                    longitude=11.22222)
        elif message.text == "–ö–æ—Ä–ø—É—Å 7":
            await bot.send_location(chat_id=message.chat.id,
                                    latitude=11.22222,
                                    longitude=11.22222)
        elif message.text == "–ö–æ—Ä–ø—É—Å 8":
            await bot.send_location(chat_id=message.chat.id,
                                    latitude=11.22222,
                                    longitude=11.22222)
        elif message.text == "–ö–æ—Ä–ø—É—Å 9":
            await bot.send_location(chat_id=message.chat.id,
                                    latitude=11.22222,
                                    longitude=11.22222)
    await message.delete()

# ############################################################################


# –≤—ã–±–æ—Ä –∫–∞—Ä—Ç—ã –∫–æ—Ä–ø—É—Å–∞
@dp.message_handler(Text(equals=["–ö–∞—Ä—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–ø—É—Å–æ–≤"]))
async def map_buildings(message: types.Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å", reply_markup=map_building())
    await message.delete()


#  –ö–∞—Ä—Ç–∞ –∫–æ—Ä–ø—É—Å–æ–≤
@dp.message_handler(Text(startswith="–ö–∞—Ä—Ç–∞"))
async def get_local_corpus(message: types.Message) -> None:
    if "–ö–∞—Ä—Ç–∞" in message.text:
        if message.text == "–ö–∞—Ä—Ç–∞ 1 –∫–æ—Ä–ø":
            await message.answer(text="1–π –∫–æ—Ä–ø—É—Å")
            await bot.send_document(chat_id=message.chat.id,
                                    document=open(f"{here is your file}", "rb"),                   # here is your file
                                    caption="–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂")
            
        elif message.text == "–ö–∞—Ä—Ç–∞ 2 –∫–æ—Ä–ø":
            await message.answer(text="2–π –∫–æ—Ä–ø—É—Å")
            await bot.send_document(chat_id=message.chat.id,
                                    document=open(f"{here is your file}", "rb"),
                                    caption="–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂")
            
        elif message.text == "–ö–∞—Ä—Ç–∞ 3 –∫–æ—Ä–ø":
            await message.answer(text="3–π –∫–æ—Ä–ø—É—Å")
            await bot.send_document(chat_id=message.chat.id,
                                    document=open(f"{here is your file}", "rb"),
                                    caption="–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂")
            
        # elif message.text == "–ö–æ—Ä–ø—É—Å 4":

        elif message.text == "–ö–∞—Ä—Ç–∞ 5 –∫–æ—Ä–ø":
            await message.answer(text="5–π –∫–æ—Ä–ø—É—Å")
            await bot.send_document(chat_id=message.chat.id,
                                    document=open(f"{here is your file}", "rb"),
                                    caption="–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂")
            
        else:
            await message.answer(text="–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ—Ä–ø—É—Å–∞...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–æ—Ä–ø—É—Å, —Å–ø–∞—Å–∏–±–æ")
    await message.answer(text="–ï—Å–ª–∏ —á—Ç–æ –ø–∏—à–∏—Ç–µ üòâ", reply_markup=ReplyKeyboardRemove())
   
    await message.delete()


# ############################################## TEST ######################################################


# test_1
# @dp.message_handler(lambda message: message)
# async def partizan(message: types.Message) -> None:
#     await message.answer(text=f"{TEST_1}")
# ##########################################################################################################


# test_2
@dp.message_handler(Text(equals=["test_2"]))
async def partizan(message: types.Message) -> None:
    await message.answer(text=f"{TEST_2}")
# ##########################################################################################################


# test_3
@dp.message_handler(Text(equals=["test_3"]))
async def partizan(message: types.Message) -> None:
    await message.answer(text=f"{TEST_3}")
# ##########################################################################################################


# test_4
@dp.message_handler(Text(equals=["test_4"]))
async def partizan(message: types.Message) -> None:
    await message.answer(text=f"{TEST_4}")
# ##########################################################################################################


# test_5
@dp.message_handler(Text(equals=["test_5"]))
async def partizan(message: types.Message) -> None:
    await message.answer(text=f"{TEST_5}")
# ##########################################################################################################
# @dp.message_handler()


# –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler()
async def message_all(message: types.Message) -> None:
    if message.text.lower() in application_fill_out:
        await message.answer(text=f"–°–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–ø–∏—Å–∫–∏", reply_markup=ikb_cmd_start)
        await message.delete()
    elif len(message.text.lower().split()) == 1 and message.text.lower().split() in TESTIKS:
        await message.answer(text=f"–ï—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ —á–µ–≥–æ )))")

    elif message.text.lower().split()[0] in questions[0]:
        mess_where = message.text.replace("?", "").lower().split()

        if len(mess_where) == 1 or len(mess_where) == 2 and mess_where[-1] not in [j for i in professions for j in i]:
            await message.answer(text=f"–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∞—á–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å \n"
                                      f"–ù–∞–ø—Ä–∏–º–µ—Ä 1: \n"
                                      f"–ì–¥–µ —Å–∏–¥—è—Ç –∞–π—Ç–∏—à–Ω–∏–∫–∏")

        elif len(mess_where) > 1:
            for word in mess_where[1:]:

                if word in professions[0]:
                    await message.answer(text=f"test 1")
                elif word in professions[1]:
                    await message.answer(text=f"test 2")
                elif word in professions[2]:
                    await message.answer(text=f"test 3")
                elif word in professions[3]:
                    await message.answer(text=f"test 4")
                elif word not in professions:
                    pass
                else:
                    await message.answer(text=f"—á—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
            await message.delete()
        else:
            await message.answer(text=f"–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∞—á–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å \n"
                                      f"–ù–∞–ø—Ä–∏–º–µ—Ä 2: \n"
                                      f"–ì–¥–µ —Å–∏–¥—è—Ç –∫–æ—Ç—ã?")

    elif message.text.lower().split()[0] in questions[1]:
        mess_how = message.text.replace("?", "").lower().split()

        if len(mess_how) == 1 or len(mess_how) == 2 and mess_how[1:]\
                not in application_fill_out:
            await message.answer(text=f"–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∞—á–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å \n"
                                      f"–ù–∞–ø—Ä–∏–º–µ—Ä : \n"
                                      f"–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª—É–∂–µ–±–∫—É")

        elif len(mess_how) > 1:
            for word in mess_how[1:]:
                if word in application_fill_out:
                    await message.answer(text=f"–°–ª—É–∂–µ–±–Ω—ã–µ –∑–∞–ø–∏—Å–∫–∏", reply_markup=ikb_cmd_start)
                    await message.delete()
                elif word not in application_fill_out and len(mess_how) <= 2:
                    await message.answer(text=f"–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∞—á–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å \n"
                                              f"–ù–∞–ø—Ä–∏–º–µ—Ä : \n"
                                              f"–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª—É–∂–µ–±–∫—É")
                elif word not in application_fill_out:
                    pass
                else:
                    await message.answer(text=f"–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∞—á–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å \n"
                                              f"–ù–∞–ø—Ä–∏–º–µ—Ä : \n"
                                              f"–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª—É–∂–µ–±–∫—É")

    else:
        chat = you_chat                                                                      # you chat
        mess_chat = message.chat.id
        user_id = message.from_user.id
        user_name = message.from_user.full_name
        text = message.text
        record_mess(chat, mess_chat, user_id, user_name, text)
        await message.answer(text=f"–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∞—á–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å \n"
                                  f"–ù–∞–ø—Ä–∏–º–µ—Ä : \n"
                                  f"<b>–ì–¥–µ —Å–∏–¥—è—Ç –∞–π—Ç–∏—à–Ω–∏–∫–∏</b> –∏–ª–∏ <b>–ö–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª—É–∂–µ–±–Ω—É—é –∑–∞–ø–∏—Å–∫—É</b>",
                             parse_mode="HTML")

# ##########################################################################################################

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
